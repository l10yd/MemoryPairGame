import React, { useState, useEffect } from "react";
import './App.css';

//—É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤)
//–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
const difficulties = {
  "4": {
    Easy: 2,
    Medium: 4,
    Hard: 8,
  },
  "6": {
    Easy: 4,
    Medium: 6,
    Hard: 9,
  },
  "8": {
    Easy: 4,
    Medium: 8,
    Hard: 16,
  },
  /*"10": {
    Easy: 5,
    Medium: 10,
    Hard: 25,
  }*/
};

//–¢–µ–º—ã –∏–∑ 16 –∫–∞—Ä—Ç–∏–Ω–æ–∫, –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª grid
const pictures = {
  Fruits: ["üçé", "üçå", "üçá", "üçì", "üçä", "üçâ", "üçç", "ü•≠", "ü•ë", "üçí", "ü•ù", "üçà", "üçë", "üçã", "ü••", "üçè"],
  Cars: ["üöó", "üöï", "üöô", "üèéÔ∏è", "üöì", "üöë", "üöí", "üöê", "üöö", "üöõ", "üöú", "üõµ", "üèçÔ∏è", "üö≤", "üõ¥", "üöç"],
  Nature: ["üåø", "üå≤", "üåπ", "üåª", "üå∑", "üå∏", "üçÅ", "üå∫", "üåº", "üçÇ", "üçÄ", "üçÑ", "üçÉ", "üå≥", "üå∞", "üèûÔ∏è"],
  Animals: ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "üêî", "ü¶Ü"],
  Emojis: ["üòÉ", "üòç", "ü§£", "üòé", "üòÅ", "üòÑ", "üòÖ", "üòÜ", "üòÇ", "üòä", "üòá", "ü•∞", "üòã", "ü§©", "ü§ó", "üôÇ"],
  Sports: ["‚öΩ", "üèÄ", "üèà", "‚öæ", "üéæ", "üèê", "üèâ", "üé±", "üèì", "üè∏", "ü•ä", "üèπ", "üéø", "üèÇ", "ü™Å", "üèãÔ∏è"],
}

//–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–µ—Ç–∫—É –∫–ª–µ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ gameStats
const generateNewGrid = (arraySize, difficulty) => {

  //–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ rowLength
  function shuffleMatrix(arr, rowLength) {
    const shuffled = [...arr];
    //–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }

    const shuffledMatrix = [];
    //–Ω–∞—Ä–µ–∑–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
    for (let i = 0; i < arr.length / rowLength; i++) {
      shuffledMatrix.push(shuffled.slice(i * rowLength, (i + 1) * rowLength));
    }

    return shuffledMatrix;
  }

//–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ä–µ–±—Ä–æ) –±–µ—Ä–µ—Ç—Å—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ difficulties
  const edge = difficulties[arraySize.toString()][difficulty];

  //–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–±—Ä–∞ –∑–∞–ø–æ–ª—è–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ—Ç 1 –¥–æ –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞
  const values = Array.from({ length: edge }, (_, index) => index + 1); 
  const pairedValues = [];
  //–¥—É–±–ª–∏—Ä—É–µ–º —ç—Ç–æ—Ç –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –ø–æ–∫–∞ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –ø–ª–æ—â–∞–¥–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
  while (pairedValues.length < arraySize * arraySize) {
    pairedValues.push(...values);
  }
  //–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π
  const shuffledValues = shuffleMatrix(pairedValues, arraySize); 
  //–¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —Ñ–ª–∞–≥–∏ hidden, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏
  const initialGrid = shuffledValues.map(row =>
      row.map(value => ({
        hidden: true,
        value: value,
      }))
    );
  
  return initialGrid;

}

export default function App() {
  
  const [showSettings, setShowSettings] = useState(false);
  const [grid, setGrid] = useState(generateNewGrid(4,"Medium"));
  const [gameStats, setGameStats] = useState({
      firstSelected: null, //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
      secondSelected: null,
      block: false, //–¥–ª—è –ø–∞—É–∑, –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫–∏
    gridSize: 4, //—Ä–∞–∑–º–µ—Ä –ø–æ–ª—è - N*N
    difficulty: "Medium",
    theme: "Fruits",
    tileCounter: 0, //—Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫, –ø—Ä–∏ gridSize*gridSize - –ø–æ–±–µ–¥–∞
  });
  //–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [tempGameStats, setTempGameStats] = useState({
    gridSize: gameStats.gridSize,
    difficulty: gameStats.difficulty,
  })
  //—Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–æ–π –≤—ã–≤–æ–¥–∏—Ç—Å—è
  const [displayText, setDisplayText] = useState(`Size: ${gameStats.gridSize}x${gameStats.gridSize}, Difficulty: ${gameStats.difficulty}.`);

  //–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const gameReset = () => {
    //–±–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const newGridSize = tempGameStats.gridSize; 
    const newDifficulty = tempGameStats.difficulty; 

    setGameStats(prevGameStats => ({
      ...prevGameStats,
      firstSelected: null,
      secondSelected: null,
      block: false,
      tileCounter: 0,
      gridSize: newGridSize, 
      difficulty: newDifficulty, 
    }));

    setGrid(generateNewGrid(newGridSize, newDifficulty)); 
    setDisplayText(`Size: ${newGridSize}x${newGridSize}, Difficulty: ${newDifficulty}.`);
    //–æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    setShowSettings(false);
  }

  //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫—É
  const onClickTile = (rowIndex, colIndex) => {
    //–µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –µ—â–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ—Ç—É –±–ª–æ–∫–∞
    if (!gameStats.block && grid[rowIndex][colIndex].hidden) {
      const updatedGrid = [...grid];
      updatedGrid[rowIndex][colIndex] = { ...updatedGrid[rowIndex][colIndex], hidden: false };
      setGrid(updatedGrid);

      if (gameStats.firstSelected === null) {
        //–≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞
        setGameStats(prevGameStats => ({ ...prevGameStats, firstSelected: { rowIndex, colIndex } }));
      } else if (gameStats.secondSelected === null) {
        //–≤—ã–±—Ä–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è —è—á–µ–π–∫–∞
        setGameStats(prevGameStats => ({ ...prevGameStats, secondSelected: { rowIndex, colIndex } }));
      }
    }
  };

  //—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª—é–±—É—é –∑–∞–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É
  useEffect(() => {
    const { firstSelected, secondSelected, block } = gameStats;

    //–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã 2 –∫–ª–µ—Ç–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    if (firstSelected && secondSelected) {
      const firstCell = grid[firstSelected.rowIndex][firstSelected.colIndex];
      const secondCell = grid[secondSelected.rowIndex][secondSelected.colIndex];

      //–µ—Å–ª–∏ —Ä–∞–≤–Ω—ã - –ø–æ–ª—É—á–∞–µ—Ç 2 –æ—á–∫–∞ –≤ —Å—á–µ—Ç—á–∏–∫ –∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
      if (firstCell.value === secondCell.value) {
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        setGameStats(prevGameStats => ({ ...prevGameStats, tileCounter: prevGameStats.tileCounter+2 }));
        setDisplayText("Nice!");
      //–∏–Ω–∞—á–µ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–≥—Ä—É –Ω–∞ —Ç–∞–π–º–∞—É—Ç, –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–∏ 2 –∫–ª–µ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ      
      } else {
        setDisplayText("Oof..");
        //–±–ª–æ–∫ –∏–≥—Ä—ã
        setGameStats(prevGameStats => ({ ...prevGameStats, block: true }));
        setTimeout(() => {
          //–ø—Ä—è—á–µ—Ç –∫–ª–µ—Ç–∫–∏
          firstCell.hidden = true;
          secondCell.hidden = true;
          setGrid([...grid]);
          setGameStats(prevGameStats => ({
            ...prevGameStats,
            //—Å–±—Ä–æ—Å 2—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
            firstSelected: null,
            secondSelected: null,
            //—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–≥—Ä—É
            block: false
          }));
        }, 1000);
      }
      // —Å–±—Ä–æ—Å –∫–ª–µ—Ç–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      setGameStats(prevGameStats => ({
        ...prevGameStats,
        firstSelected: null,
        secondSelected: null
      }));
    }
  }, [grid]);

  //—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —Ä–∞–≤–µ–Ω –ø–ª–æ—â–∞–¥–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    if (gameStats.tileCounter === gameStats.gridSize * gameStats.gridSize) {
      setDisplayText("Victory! Yaay!");
      setGameStats(prevGameStats => ({ ...prevGameStats, block: true }));

      setTimeout(() => {
        gameReset();
      }, 3000);
    }
  }, [gameStats.tileCounter, gameStats.gridSize]);

  //—Å–º–µ–Ω–∞ —Ç–µ–º—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ –∫—Ä—É–≥—É –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ pictures –≤ gameStats
  const changeTheme = () => {
    const themes = Object.keys(pictures);
    const totalThemes = themes.length;
    const currentThemeIndex = themes.indexOf(gameStats.theme);
    const nextThemeIndex = (currentThemeIndex + 1) % totalThemes; // –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
    const nextTheme = themes[nextThemeIndex];

    setDisplayText(`Current theme: ${nextTheme}`);
    setGameStats(prevGameStats => ({ ...prevGameStats, theme: nextTheme }));
  };

  return (
    <div>

      <div id="button-container" style={{ display: "flex" }}>
      {/* –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <button id="settings-button" onClick={() => {
      //–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ, –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–≥—Ä—É
        setShowSettings(!showSettings);
        setTempGameStats({ gridSize: gameStats.gridSize, difficulty: gameStats.difficulty });
        setGameStats(prevGameStats => ({ ...prevGameStats, block: !prevGameStats.block }));
      }}>
      Settings
      </button>

      {/* –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã */}
      <button id="theme-button" onClick={() => changeTheme()}>
      Theme
      </button>
        </div>

      {/* –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {showSettings && (
        <div className="settings-dialog">
          <div className="settings-header">
          <span className="close-button" onClick={() => {
          //–∫–Ω–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–≥—Ä—É
            setShowSettings(false);
            setGameStats(prevGameStats => ({ ...prevGameStats, block: false }));
          }}>
            &#10006;
          </span>
          <h2>Settings</h2>
          </div>
          <label>Field Size:</label>
          {/* —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è */}
          <select 
            value={tempGameStats.gridSize} 
            onChange={(event) => {
              const newGridSize = event.target.value;
              const newDifficulty = newGridSize === "4" ? "Easy" : tempGameStats.difficulty;
              setTempGameStats({ gridSize: newGridSize, difficulty: newDifficulty });
            }}
          >
            {[4, 6, 8].map((size, index) => (
              <option key={index} value={size}>
                {size}
              </option>
            ))}
          </select>
          <label>Difficulty (Unique elements):</label>
          {/* —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          <select
            value={tempGameStats.difficulty}
            onChange={(event) => {
              const newDifficulty = event.target.value;
              setTempGameStats((prevStats) => ({
                ...prevStats,
                difficulty: newDifficulty,
              }));
            }}
          >
            {/* –º–∞–ø–ø–∏–º –æ–ø—Ü–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç difficulties */}
            {Object.keys(difficulties[tempGameStats.gridSize.toString()]).map(
              (difficulty, index) => (
                <option key={index} value={difficulty}>
                  {difficulty} (
                  {difficulties[tempGameStats.gridSize.toString()][difficulty]})
                </option>
              )
            )}
          </select>

          {/* –∫–Ω–æ–ø–∫–∞ Reset */}
          <button onClick={() => {
            setGameStats({
              ...gameStats,
              gridSize: tempGameStats.gridSize,
              difficulty: tempGameStats.difficulty
            });
            gameReset();
          }}>
          Reset
          </button>
        </div>
      )}

      <div>
        
      {/* –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}

      {grid.map((rowArr, rowIndex) => (
        <div key={rowIndex} style={{ display: "flex" }}>
          {rowArr.map((cell, colIndex) => (
            <div
              className={`tile`}
              key={colIndex}
              onClick={() => !gameStats.block && onClickTile(rowIndex, colIndex)}
            >
              <div className="tile-picture" style={{opacity: cell.hidden ? 0 : 1}}>
              {cell.hidden ? null : pictures[gameStats.theme][cell.value-1]}
                </div>
            </div>
          ))}
        </div>
      ))}
        </div>


      <div className="display-text">
        {displayText}
      </div>

      
    </div>
  );
}
